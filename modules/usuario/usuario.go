package usuario

import (
	"fmt"
	"log" // Importar para logs dentro del m√≥dulo
	"sync"

	// No necesitas time aqu√≠, solo en el handler para la cookie Expires
	// No necesitas bcrypt aqu√≠
	"github.com/google/uuid" // Importar para generar UUIDs de sesi√≥n
)

// Usuario representa un usuario registrado en el sistema
type Usuario struct {
	ID             string `json:"id"`       // Identificador √∫nico del usuario (UUIDs)
	NombreUsuario  string `json:"username"` // Nombre de usuario para login
	HashContrase√±a []byte `json:"-"`        // Hash seguro de la contrase√±a. El tag `json:"-"` evita que se exponga.
	Rol            string `json:"role"`     // Rol del usuario (ej: "usuario", "admin"). Por defecto ser√° "usuario".
}

// Credenciales es una struct temporal para decodificar las credenciales de registro/login
type Credenciales struct {
	NombreUsuario string `json:"username"`
	Contrase√±a    string `json:"password"`
}

// --- Almacenamiento en memoria con Mutex para Usuarios ---
var (
	muUsuario         sync.Mutex                  // Mutex para proteger el acceso a los mapas de usuarios
	Usuarios          = make(map[string]*Usuario) // Mapa [ID de Usuario] -> *Usuario
	UsuariosPorNombre = make(map[string]*Usuario) // Mapa [NombreUsuario] -> *Usuario
)

// --- Almacenamiento en memoria con Mutex para Sesiones ---
var (
	muSesion sync.Mutex // Mutex para proteger el acceso al mapa de sesiones
	// El mapa de Sesiones asocia el ID de Sesi√≥n con el ID del Usuario autenticado
	Sesiones = make(map[string]string) // Mapa [ID de Sesi√≥n] -> ID de Usuario
	// Podr√≠amos almacenar m√°s datos de sesi√≥n si fuera necesario (ej: tiempo de creaci√≥n para expiraci√≥n real en el server)
)

// --- Funciones seguras para gestionar Usuarios (Aseg√∫rate de tener estas con los mutexes) ---

// AgregarUsuario agrega un usuario al almacenamiento de forma segura
func AgregarUsuario(user *Usuario) error {
	muUsuario.Lock()         // Bloqueamos el mutex antes de acceder a los mapas
	defer muUsuario.Unlock() // Aseguramos que se desbloquee al salir de la funci√≥n

	log.Printf("üîí Intentando agregar usuario '%s'", user.NombreUsuario)

	// Verificar si el nombre de usuario ya existe
	if _, existe := UsuariosPorNombre[user.NombreUsuario]; existe {
		log.Printf("‚ùå Usuario '%s' ya est√° registrado.", user.NombreUsuario)
		return fmt.Errorf("El nombre de usuario '%s' ya est√° registrado", user.NombreUsuario)
	}

	// Asignar un ID √∫nico si no lo tiene (deber√≠a generarse antes de llamar a esta funci√≥n)
	if user.ID == "" {
		user.ID = uuid.New().String() // Generar UUID si no tiene
	} else if _, existe := Usuarios[user.ID]; existe {
		// Si ya tiene ID pero ese ID ya existe en el mapa, es un error inesperado
		log.Printf("‚ùå Error interno: El ID de usuario '%s' ya existe al agregar.", user.ID)
		return fmt.Errorf("Error interno: El ID de usuario '%s' ya existe", user.ID)
	}

	Usuarios[user.ID] = user                     // Guardar por ID
	UsuariosPorNombre[user.NombreUsuario] = user // Guardar por NombreUsuario

	log.Printf("‚úÖ Usuario '%s' agregado con ID %s", user.NombreUsuario, user.ID)
	return nil
}

// ObtenerUsuarioPorNombre busca un usuario por nombre de forma segura
func ObtenerUsuarioPorNombre(nombreUsuario string) (*Usuario, bool) {
	muUsuario.Lock()         // Bloqueamos el mutex antes de acceder al mapa
	defer muUsuario.Unlock() // Aseguramos que se desbloquee al salir

	log.Printf("üîí Buscando usuario por nombre: '%s'", nombreUsuario)
	user, existe := UsuariosPorNombre[nombreUsuario]
	if existe {
		log.Printf("‚úÖ Usuario '%s' encontrado.", nombreUsuario)
	} else {
		log.Printf("‚ùå Usuario '%s' no encontrado.", nombreUsuario)
	}
	return user, existe
}

// ObtenerUsuarioPorID busca un usuario por ID de forma segura
func ObtenerUsuarioPorID(id string) (*Usuario, bool) {
	muUsuario.Lock()         // Bloqueamos el mutex
	defer muUsuario.Unlock() // Desbloqueamos

	log.Printf("üîí Buscando usuario por ID: '%s'", id)
	user, existe := Usuarios[id]
	if existe {
		log.Printf("‚úÖ Usuario con ID '%s' encontrado.", id)
	} else {
		log.Printf("‚ùå Usuario con ID '%s' no encontrado.", id)
	}
	return user, existe
}

// --- Funciones seguras para gestionar Sesiones ---

// CrearSesion genera un ID de sesi√≥n √∫nico y lo asocia con un ID de usuario
func CrearSesion(userID string) (string, error) {
	muSesion.Lock()         // Bloqueamos el mutex de sesiones
	defer muSesion.Unlock() // Aseguramos que se desbloquee

	log.Printf("üîí Intentando crear sesi√≥n para usuario ID '%s'", userID)

	sessionID := uuid.New().String() // Generar un UUID para la sesi√≥n

	// Opcional: Verificar si el ID de sesi√≥n ya existe (muy improbable con UUID)
	if _, existe := Sesiones[sessionID]; existe {
		log.Printf("‚ùå Error interno: ID de sesi√≥n '%s' generado ya existe.", sessionID)
		return "", fmt.Errorf("Error interno: ID de sesi√≥n generado ya existe")
	}

	Sesiones[sessionID] = userID // Guardar la asociaci√≥n ID de Sesi√≥n -> ID de Usuario
	log.Printf("‚úÖ Sesi√≥n creada: '%s' para usuario ID '%s'", sessionID, userID)
	return sessionID, nil
}

// ObtenerUsuarioIDPorSesion busca el ID de usuario asociado a un ID de sesi√≥n
func ObtenerUsuarioIDPorSesion(sessionID string) (string, bool) {
	muSesion.Lock()         // Bloqueamos el mutex de sesiones
	defer muSesion.Unlock() // Aseguramos que se desbloquee

	log.Printf("üîí Buscando usuario ID por sesi√≥n: '%s'", sessionID)
	userID, existe := Sesiones[sessionID]
	if existe {
		log.Printf("‚úÖ Sesi√≥n '%s' encontrada, usuario ID '%s'.", sessionID, userID)
	} else {
		log.Printf("‚ùå Sesi√≥n '%s' no encontrada.", sessionID)
	}
	return userID, existe
}

// EliminarSesion elimina la asociaci√≥n de una sesi√≥n
func EliminarSesion(sessionID string) {
	muSesion.Lock()         // Bloqueamos el mutex de sesiones
	defer muSesion.Unlock() // Aseguramos que se desbloquee

	log.Printf("üîí Intentando eliminar sesi√≥n: '%s'", sessionID)
	// No hay error si el ID de sesi√≥n no existe
	delete(Sesiones, sessionID)
	log.Printf("‚úÖ Sesi√≥n eliminada: '%s'", sessionID)
}

// TODO: Considerar la limpieza de sesiones expiradas si almacenamos tiempo de creaci√≥n.
